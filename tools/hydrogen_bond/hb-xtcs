#!/usr/bin/env python
import os
import sys
import argparse

import numpy as np
import mdtraj as md
import pandas as pd

from cal_hb import cal_hb_xtc

def parse_args():
    parser = argparse.ArgumentParser(description="Cal hydrogen bond for xtc ensemble.")
    parser.add_argument("-s", dest="xtcf", help="The xtc floder or xtc file or meta pickle file.", required=True)
    parser.add_argument("-t", dest="topf", help="The top file for the trajectory file.", required=True)
    parser.add_argument("-o", dest="outf", help="The result floder.", default="hb-trajs")

    args = parser.parse_args()

    return args.xtcf, args.topf, args.outf

def main():
    samf, topf, outf = parse_args()

    traj  = md.load_pdb(topf)
    if samf.startswith("meta"):
        trajfs = pd.read_pickle(samf)['traj_fn'].values
    elif os.path.isfile(samf):
        trajfs = [samf]
    elif os.path.isdir(samf):
        trajfs = [ os.path.join(samf,_) for _ in sorted(os.listdir(samf)) if _.endswith(".xtc")]
    if not os.path.exists(outf):
        os.mkdir(outf)
    angles_dict = {}
    distan_dict = {}
    hb_dict = {}
    hb_keys = []

    print("Cal hydrogen bond")
    n = 1
    for abs_trajf in trajfs:
        c_name = n
        hbdict, distances, angles = cal_hb_xtc(abs_trajf, topf)
        angles_dict[c_name] = angles
        distan_dict[c_name] = distances
        hb_dict[c_name] = hbdict
        hb_keys.extend(hbdict["key"].tolist())

        sys.stdout.write("Finished cal, %3d/%3d\r"%(n,len(trajfs)))
        sys.stdout.flush(); n += 1

    hb_keys = list(set(hb_keys))
    hb_prob = []
    hb_label= []

    label = lambda hbond : '%s--%s' % (traj.topology.atom(hbond[0]), traj.topology.atom(hbond[2]))

    print("Merge hydrogen bond data")
    n = 0
    for k in hb_keys:
        k_prob = 0
        for i in range(1,len(trajfs)+1):
            hbdict = hb_dict[i]
            popu   = 1

            tmp_hbcol = hbdict[hbdict['key']==k]
            if tmp_hbcol.empty:
                prob = 0
            else:
                prob = tmp_hbcol["probability"].values[0]
            k_prob += prob * popu
            #sys.stdout.write("del with key: %s,   %5d/%5d \r"%(k, n, len(hb_keys)))
            #sys.stdout.flush(); n += 1

        atom_i = list(map(int, k.split("-")))
        k_label= label(atom_i)

        hb_prob.append(k_prob/(len(trajfs)*1.0))
        hb_label.append(k_label)

    hb_msm = pd.DataFrame({"label":hb_label, "frequence":hb_prob, "key":hb_keys})

    hb_msmf = os.path.join(outf, "hb-msm.txt")
    hb_anglesf = os.path.join(outf, "angles-msm.pickl")
    hb_distanf = os.path.join(outf, "distance-msm.pickl")

    hb_msm.to_csv(hb_msmf, sep=" ", index=False)
    pd.to_pickle(angles_dict, hb_anglesf)
    pd.to_pickle(distan_dict, hb_distanf)

if __name__ == "__main__":
    main()
